name: Deploy to Vultr

on:
  push:
    branches: [ main ]
  
  workflow_dispatch:
 

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_DIR: /var/www/puthidelivery.eltheocapital.com

    steps:
      - uses: actions/checkout@v4

      # Build tarball OUTSIDE the working dir so tar doesn't see new files while reading "."
      - name: Create release tarball
        run: |
          EXCL="$RUNNER_TEMP/deploy-exclude"
          printf '%s\n' \
            'vendor/' 'node_modules/' '.git/' '.github/' 'storage/' '.env' \
            'release.tgz' '.deploy-exclude' > "$EXCL"
          tar -C "$GITHUB_WORKSPACE" -czf "$RUNNER_TEMP/release.tgz" -X "$EXCL" .
          mv "$RUNNER_TEMP/release.tgz" ./release.tgz
          ls -lh release.tgz

      - name: Upload tarball to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.SSH_KEY }}
          source: "release.tgz"
          target: "${{ env.APP_DIR }}/tmp/"

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -Eeuo pipefail
            umask 002
            set -x

            APP_DIR="${APP_DIR:-/var/www/puthidelivery.eltheocapital.com}"
            RELEASES_DIR="$APP_DIR/releases"
            SHARED_DIR="$APP_DIR/shared"
            TMP_DIR="$APP_DIR/tmp"
            RELEASE="$(date +%Y%m%d%H%M%S)"
            RELEASE_PATH="$RELEASES_DIR/$RELEASE"

            # Fail fast if vars empty
            : "${APP_DIR:?}"; : "${RELEASES_DIR:?}"; : "${SHARED_DIR:?}"; : "${RELEASE_PATH:?}"

            # Ensure layout
            mkdir -p "$RELEASES_DIR" "$SHARED_DIR" "$TMP_DIR"
            mkdir -p "$SHARED_DIR/storage/app" \
                     "$SHARED_DIR/storage/framework/cache" \
                     "$SHARED_DIR/storage/framework/views" \
                     "$SHARED_DIR/storage/framework/sessions" \
                     "$SHARED_DIR/storage/framework/testing" \
                     "$SHARED_DIR/storage/logs"

            # Prepare release
            mkdir -p "$RELEASE_PATH"
            tar -xzf "$TMP_DIR/release.tgz" -C "$RELEASE_PATH"

            # Link shared files/dirs
            ln -sfn "$SHARED_DIR/.env" "$RELEASE_PATH/.env"
            rm -rf "$RELEASE_PATH/storage"
            ln -sfn "$SHARED_DIR/storage" "$RELEASE_PATH/storage"
            mkdir -p "$RELEASE_PATH/bootstrap/cache"

            

            # PHP deps & optimize
            cd "$RELEASE_PATH"
            COMPOSER_MEMORY_LIMIT=-1 composer install --no-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader
            php artisan storage:link || true

            # DB smoke test before migrate (clearer error if misconfigured)
            php -r 'require "vendor/autoload.php"; $app=require "bootstrap/app.php"; $app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap(); try { \Illuminate\Support\Facades\DB::connection()->getPdo(); echo "DB OK\n"; } catch (\Throwable $e) { fwrite(STDERR, "DB FAIL: ".$e->getMessage()."\n"); exit(1); }'

            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # Atomic switch
            ln -sfn "$RELEASE_PATH" "$APP_DIR/current"

            # Optional: reload apache if allowed in sudoers
            sudo -n systemctl reload apache2 || true
